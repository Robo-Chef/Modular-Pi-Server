name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Run ShellCheck
        run: shellcheck scripts/*.sh

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: markdownlint '**/*.md' --config .markdownlint.json

  yamllint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint on YAML files
        run: yamllint -v .

  trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for all images
        run: |
          # List of images to scan
          images=(
            "pihole/pihole:2024.06.0"
            "klutchell/unbound:latest"
            "prom/prometheus:2.51.0"
            "prom/node-exporter:1.7.0"
            "prom/alertmanager:0.27.0"
            "grafana/grafana:11.1.0"
            "portainer/portainer-ce:latest"
            "containrrr/watchtower:latest"
            "dozzle/dozzle:latest"
          )
          
          # Create a combined SARIF file
          echo '{"$schema": "https://json.schemastore.org/sarif-2.1.0.json", "version": "2.1.0", "runs": []}' > trivy-scan-results.sarif
          
          # Scan each image individually and merge results
          for image in "${images[@]}"; do
            echo "Scanning $image..."
            # Use a temporary file for each scan
            temp_sarif="temp-${image//\//-}.sarif"
            if trivy image "$image" --format sarif --output "$temp_sarif" --severity CRITICAL,HIGH --ignore-unfixed --skip-files "/etc/ssl/certs/ca-certificates.crt" --timeout 5m; then
              # If scan succeeded, merge the results
              if [ -f "$temp_sarif" ] && [ -s "$temp_sarif" ]; then
                # Extract runs and merge them
                jq -r '.runs[]?' "$temp_sarif" >> /tmp/trivy-runs.json 2>/dev/null || true
              fi
            fi
            # Clean up temp file
            rm -f "$temp_sarif"
          done
          
          # Finalize the combined SARIF file
          if [ -f /tmp/trivy-runs.json ] && [ -s /tmp/trivy-runs.json ]; then
            jq -n "{ \"\$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\", \"version\": \"2.1.0\", \"runs\": [$(cat /tmp/trivy-runs.json | jq -s '.')] }" > trivy-scan-results.sarif
          fi

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-scan-results.sarif

  # Optional gate job for single status check
  all_checks:
    runs-on: ubuntu-latest
    needs: [shellcheck, markdownlint, yamllint, trivy]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.shellcheck.result }}" == "success" && "${{ needs.markdownlint.result }}" == "success" && "${{ needs.yamllint.result }}" == "success" && "${{ needs.trivy.result }}" == "success" ]]; then
            echo "All checks passed! "
            exit 0
          else
            echo "Some checks failed "
            exit 1
          fi
