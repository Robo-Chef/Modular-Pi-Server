name: CI Checks

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run every day at 3 AM AEST (5 PM UTC)
    - cron: "0 17 * * *"

jobs:
  lint-scripts-and-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Run ShellCheck on scripts
        run: shellcheck scripts/*.sh

      - name: Install Hadolint
        run: sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-arm64 && sudo chmod +x /usr/local/bin/hadolint # For ARM64 on Raspberry Pi, adjust if GitHub Actions runner is different

      - name: Run Hadolint on Dockerfiles
        run: find . -name "Dockerfile" -exec hadolint {} + # Scans all Dockerfiles

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint on YAML files
        run: yamllint . -f .github/configs/.yamllint.yml # Assuming a config file exists or will be created

      - name: Validate Docker Compose files
        run: |
          docker compose -f docker/docker-compose.core.yml -f docker/monitoring/docker-compose.monitoring.yml -f docker/optional/docker-compose.optional.yml config

  check-markdown-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          config-file: ".github/configs/markdown-link-check.jsonc"

  lint-markdown:
    runs-on: ubuntu-latest
    needs: check-markdown-links # Ensures link check passes first
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install markdownlint-cli and prettier
        run: |
          npm install -g markdownlint-cli@0.35.0
          npm install -g prettier@3.0.0
          npm install -g prettier-plugin-markdown@2.0.0

      - name: Run markdownlint
        run: |
          markdownlint --config .github/configs/.markdownlint.json "**/*.md" --ignore "node_modules/**" --ignore ".github/**" --ignore "**/node_modules/**"

      - name: Fix markdown files
        if: github.event_name == 'push'  # Only run on push events
        run: |
          # Fix markdown files using prettier
          find . -name "*.md" -not -path "*/node_modules/*" -not -path "*/.github/*" -exec prettier --write --prose-wrap always {} \;
          
          # Configure git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Check if there are changes to commit
          git add .
          if ! git diff --quiet && ! git diff --staged --quiet; then
            git commit -m "style: auto-format markdown files"
            git push
          fi

      - name: Fix markdown files
        if: github.event_name == 'pull_request'  # Only run on pull request events
        run: |
          # Fix markdown files using prettier
          find . -name "*.md" -not -path "*/node_modules/*" -not -path "*/.github/*" -exec prettier --write --prose-wrap always {} \;

      - name: Run markdownlint
        run: |
          markdownlint --config .github/configs/.markdownlint.json "**/*.md" --ignore "node_modules/**" --ignore ".github/**" --ignore "**/node_modules/**"

  scan-docker-images:
    runs-on: ubuntu-latest
    continue-on-error: true  # Continue even if this job fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for all images
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: |
            pihole/pihole:2024.06.0
            klutchell/unbound:latest
            prom/prometheus:2.51.0
            prom/node-exporter:1.7.0
            prom/alertmanager:0.27.0
            grafana/grafana:11.1.0
            portainer/portainer-ce:latest
            containrrr/watchtower:latest
            dozzle/dozzle:latest
          format: "sarif"
          output: "trivy-scan-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: '0'  # Don't fail the build on vulnerabilities
          ignore-unfixed: true
          skip-files: "/etc/ssl/certs/ca-certificates.crt"  # Ignore common false positives
          timeout: '5m'  # 5 minute timeout per image

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()  # Always upload results, even if the scan fails
        with:
          name: trivy-scan-results
          path: |
            trivy-scan-results.sarif

      - name: Generate vulnerability report
        if: always()  # Always generate a report
        run: |
          echo "# 📊 Trivy Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "## Scan completed at $(date)" >> $GITHUB_STEP_SUMMARY
          
          # Check if there are any critical or high severity vulnerabilities
          if [ -f "trivy-scan-results.sarif" ]; then
            echo "### 🔍 Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "Detailed SARIF report is available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
            
            # Extract and summarize critical/high vulnerabilities
            echo "### ⚠️ High/Critical Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Package | Version | Vulnerability ID | Description |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|---------|---------|------------------|-------------|" >> $GITHUB_STEP_SUMMARY
            
            # Use jq to parse the SARIF file and extract relevant information
            jq -r '
              .runs[].results[] | 
              select(.level == "error" or .level == "warning") | 
              "|\(.level)|\(.locations[].physicalLocation.artifactLocation.uri)|\
              \(.locations[].physicalLocation.region.startLine)|\
              \(.ruleId)|\
              \(.message.text | gsub("\n"; " ") | .[0:50] + (if length > 50 then "..." else "" end))|"
            ' trivy-scan-results.sarif 2>/dev/null || echo "No vulnerabilities found or error parsing results" >> $GITHUB_STEP_SUMMARY
            
            echo "\n### 🔍 View Full Report" >> $GITHUB_STEP_SUMMARY
            echo "Download the full SARIF report from the workflow artifacts for detailed information." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Error: Trivy scan failed to generate results." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "\n### 📊 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the vulnerabilities in the report above" >> $GITHUB_STEP_SUMMARY
          echo "2. Update to newer versions of the images if available" >> $GITHUB_STEP_SUMMARY
          echo "3. If a vulnerability is a false positive, consider adding it to the ignore list" >> $GITHUB_STEP_SUMMARY
