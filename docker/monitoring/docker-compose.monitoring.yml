services:
  prometheus:
    image: prom/prometheus:latest # Specifies the Prometheus Docker image and a specific version tag.
    container_name: prometheus # Assigns a static name to the container.
    hostname: prometheus-server # Sets the hostname within the container.
    networks:
      - monitoring_net # Connects Prometheus to the custom monitoring bridge network.
    volumes:
      - prometheus_data:/prometheus # Mounts a named volume for persistent Prometheus data.
    environment:
      TZ: ${TZ:-America/New_York} # Sets the timezone for the container, defaulting to America/New_York.
    command: # Command to start Prometheus with specific configuration.
      - '--storage.tsdb.path=/prometheus' # Specifies the path for time-series database storage.
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}' # Data retention period, configurable via .env.
      - '--web.enable-lifecycle' # Enables API endpoints for managing the server lifecycle.
      - '--web.enable-admin-api' # Enables admin API for operations like snapshotting.
    ports:
      - '${PROMETHEUS_PORT:-9090}:9090' # Exposes Prometheus web UI (configurable port).
    restart: unless-stopped # Ensures the container restarts automatically unless explicitly stopped.
    deploy:
      resources:
        limits: # Hard limits for resource usage.
          cpus: '0.5' # Limits CPU usage to 0.5 of a core.
          memory: 512M # Limits memory usage to 512MB.
        reservations: # Guaranteed minimum resources.
          memory: 256M # Reserves 256MB of memory.
    healthcheck: # Defines a health check for Prometheus.
      test: # Checks Prometheus's /-/healthy endpoint.
        ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:9090/-/healthy']
      interval: 30s # How often to perform the check.
      timeout: 10s # How long to wait for a response.
      retries: 3 # How many times to retry.
      start_period: 30s # Grace period for startup.

  grafana:
    image: grafana/grafana:latest # Specifies the Grafana Docker image.
    container_name: grafana # Assigns a static name.
    hostname: grafana-server # Sets the hostname within the container.
    networks:
      - monitoring_net # Connects Grafana to the custom monitoring network.
    volumes:
      - grafana_data:/var/lib/grafana # Mounts a named volume for persistent Grafana data.
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning # Auto-configure data sources and dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards # Pre-built dashboards
    environment:
      TZ: ${TZ:-America/New_York} # Sets the timezone.
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD} # Sets the admin password from .env.
      GF_ALERTING_ENABLED: true # Explicitly enables Grafana's unified alerting.
      GF_ALERTING_ALLOW_EXT_ALERTMANAGERS: true # Allows integration with external Alertmanagers if needed.
      GF_USERS_ALLOW_SIGN_UP: false # Disables user self-registration.
      GF_USERS_ALLOW_ORG_CREATE: false # Disables organization creation by users.
      GF_SECURITY_DISABLE_GRAVATAR: true # Disables Gravatar integration for user avatars.
      GF_ANALYTICS_REPORTING_ENABLED: false # Disables anonymous usage reporting.
      GF_ANALYTICS_CHECK_FOR_UPDATES: false # Disables checking for updates.
      GF_LOG_LEVEL: warn # Sets logging level to warn.
      GF_DATABASE_TYPE: sqlite3 # Uses SQLite as the database backend.
      GF_SESSION_PROVIDER: file # Configures file-based session storage.
      GF_SESSION_PROVIDER_CONFIG: sessions # Specifies the directory for session files.
    ports:
      - '${GRAFANA_PORT:-3000}:3000' # Exposes Grafana web UI (configurable port).
    restart: unless-stopped # Ensures the container restarts automatically.
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: # Checks Grafana's API health endpoint.
        ['CMD-SHELL', 'wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on: # Ensures Prometheus starts before Grafana.
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest # Specifies the Node Exporter Docker image.
    container_name: node-exporter # Assigns a static name.
    hostname: node-exporter # Sets the hostname within the container.
    networks:
      - monitoring_net # Connects Node Exporter to the monitoring network.
    volumes:
      - /proc:/host/proc:ro # Mounts /proc for process metrics.
      - /sys:/host/sys:ro # Mounts /sys for system metrics.
      - /:/rootfs:ro # Mounts the root filesystem for disk usage metrics.
    command: # Command to run Node Exporter, specifying paths.
      - '--path.procfs=/host/proc' # Tells Node Exporter where to find /proc.
      - '--path.rootfs=/rootfs' # Tells Node Exporter where to find the root filesystem.
      - '--path.sysfs=/host/sys' # Tells Node Exporter where to find /sys.
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)' # Excludes certain mount points.
    ports:
      - '127.0.0.1:${NODE_EXPORTER_PORT:-9100}:9100' # Exposes Node Exporter metrics (configurable port, localhost only).
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          memory: 64M

  uptime-kuma:
    image: louislam/uptime-kuma:latest # Specifies the Uptime Kuma Docker image.
    container_name: uptime-kuma # Assigns a static name.
    hostname: uptime-kuma-server # Sets the hostname within the container.
    networks:
      - monitoring_net # Connects Uptime Kuma to the monitoring network.
    volumes:
      - uptime_kuma_data:/app/data # Mounts a named volume for persistent Uptime Kuma data.
    environment:
      TZ: ${TZ:-America/New_York} # Sets the timezone.
    ports:
      - '${UPTIME_KUMA_PORT:-3001}:3001' # Exposes Uptime Kuma web UI (configurable port).
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: # Checks Uptime Kuma's web interface.
        ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3001']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  prometheus_data: # Named volume for Prometheus data.
    driver: local
  grafana_data: # Named volume for Grafana data.
    driver: local
  uptime_kuma_data: # Named volume for Uptime Kuma data.
    driver: local

networks:
  monitoring_net:
    driver: bridge # Defines a custom bridge network for monitoring services.
    ipam:
      config:
        - subnet: ${MONITORING_NETWORK}
          gateway: ${MONITORING_GATEWAY}
